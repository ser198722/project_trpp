import asyncio
import random

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart, Text
from aiogram.types import (Message, InlineKeyboardMarkup, InlineKeyboardButton,
                           CallbackQuery, LabeledPrice, PreCheckoutQuery, ReplyKeyboardRemove)
from aiogram.utils.callback_data import CallbackData

import sqlite3
import states
from config import admin_id
from load_all import dp, bot
from keyboard import start_menu
from inline import cancel, choice_assortment, forms_start, forms, cancel_assort, s_choice_assortment, ref_choice
from states import Forms, Ref_code


@dp.message_handler(CommandStart())
async def start_message(message: types.Message):
    user_id = message.from_user.id
    code_list = [z for z in range(1000, 10001)]
    count_ref = 0

    db = sqlite3.connect('users.db')
    cur = db.cursor()

    cur.execute("CREATE TABLE IF NOT EXISTS users (chat_id BIGINT, code BIGINT, count_ref TEXT)")
    db.commit()

    cur.execute("CREATE TABLE IF NOT EXISTS first_sale (chat_id BIGINT)")
    db.commit()

    cur.execute('SELECT * FROM users')
    rows = cur.fetchall()

    cur.execute(f'SELECT * FROM users WHERE chat_id = {user_id}')
    rows_user = cur.fetchall()
    if len(rows_user) == 0:
        cur.execute(f'INSERT INTO users VALUES(?,?,?)', (user_id, code_list[len(rows)], count_ref))
        db.commit()

    await message.answer('üîû –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –º–æ–∂–Ω–æ –¢–û–õ–¨–ö–û –ª–∏—Ü–∞–º —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç!\n \n'
                         'üç∫ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PIVO 2 PIVO!\n \n' 
                         '‚úÖ –£ –Ω–∞—Å –í—ã –Ω–∞–π–¥–µ—Ç–µ –ª—É—á—à–∏–µ —Å–æ—Ä—Ç–∞ –ø–∏–≤–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º\n \n'
                         'üì© –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞\n \n'
                         '‚ùóÔ∏è –ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –≤—Ä–µ–¥–∏—Ç –í–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é!', reply_markup=start_menu)


@dp.message_handler(Text(equals=['üíµ –†–µ—Ñ. —Å–∏—Å—Ç–µ–º–∞',' –†–µ—Ñ. —Å–∏—Å—Ç–µ–º–∞']))
async def referals_menu(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer('–£ –Ω–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞!\n\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –í–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, '
                         '—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É 5 % –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É\n\n'
                         '–õ–∏–±–æ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö, '
                         '–∏—Å–ø–æ–ª—å–∑—É—è –ª–∏—á–Ω—ã–π –∫–æ–¥. –ö–æ–≥–¥–∞ 3 —á–µ–ª–æ–≤–µ–∫–∞ –≤–≤–µ–¥—É—Ç –∫–æ–¥ –∏ —Å–æ–≤–µ—Ä—à–∞—Ç –ø–æ–∫—É–ø–∫—É, '
                         '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10 %. –ö–æ–≥–¥–∞ 5 —á–µ–ª–æ–≤–µ–∫ - 15 %\n\n'
                         '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ. —Å–∏—Å—Ç–µ–º–æ–π',
                         reply_markup=ref_choice)

@dp.callback_query_handler(text='ref_info')
async def ref_info(call: CallbackQuery):
    await call.answer(cache_time=60)
    # await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    db = sqlite3.connect('users.db')
    cur = db.cursor()

    cur.execute(f'SELECT code FROM users WHERE chat_id = {call.message.chat.id}')
    code = cur.fetchone()

    cur.execute(f'SELECT count_ref FROM users WHERE code = {code[0]}')
    str_ref = cur.fetchone()
    if str_ref[0] == '0':
        count = 0
    elif str_ref[0].count(',') == 0:
        count = 1
    else:
        count = str_ref[0].count(',') + 1

    if count == 0:
        sale = 0
    elif count < 3:
        sale = 5
    elif count < 5:
        sale = 10
    else:
        count = 15

    await call.message.answer(f'–í–∞—à –ª–∏—á–Ω—ã–π –∫–æ–¥ ‚Äì {code[0]}\n'
                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ‚Äì {count}\n'
                              f'–í–∞—à–∞ —Å–∫–∏–¥–∫–∞ - {sale} %',
                              reply_markup=cancel)


@dp.callback_query_handler(text='ref_code')
async def start_ref_code(call: CallbackQuery):
    await call.answer(cache_time=60)
    # await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥')
    await Ref_code.first()


@dp.message_handler(state=Ref_code.input_code)
async def ref_code(message: types.Message, state: FSMContext):
    ref_code = str(message.text)
    id_ref = message.from_user.id

    db = sqlite3.connect('users.db')
    cur = db.cursor()

    cur.execute(f'SELECT count_ref FROM users WHERE code = {ref_code}')
    referals = cur.fetchone()

    cur.execute(f'SELECT code FROM users WHERE chat_id = {id_ref}')
    code_main = cur.fetchone()

    cur.execute(f'SELECT chat_id FROM first_sale where chat_id = {id_ref}')
    count_fs = cur.fetchall()

    if type(referals) == tuple:
        str_referals = ''
        for i in referals:
            str_referals += str(i) + ','
        a = str_referals + str(id_ref)

        if str(id_ref) not in str_referals:
            if code_main[0] == int(ref_code):
                await message.answer('–í—ã –≤–≤–µ–ª–∏ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥')
            elif referals[0] == '0':
                cur.execute(f'UPDATE users SET count_ref = "{id_ref}" WHERE code = "{ref_code}"')
                db.commit()
                if count_fs == 0:
                    cur.execute(f'INSERT INTO first_sale VALUES(?)', (id_ref, ))
                    db.commit()
                await message.answer('–ö–æ–¥ –≤–≤–µ–¥—ë–Ω —É—Å–ø–µ—à–Ω–æ. –°–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
            else:
                cur.execute(f'UPDATE users SET count_ref = "{a}" WHERE code = "{ref_code}"')
                db.commit()
                if count_fs == 0:
                    cur.execute(f'INSERT INTO first_sale VALUES(?)', (id_ref,))
                    db.commit()
                await message.answer('–ö–æ–¥ –≤–≤–µ–¥—ë–Ω —É—Å–ø–µ—à–Ω–æ. –°–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')

        else:
            await message.answer('–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
    else:
        await message.answer('–¢–∞–∫–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    await state.finish()

@dp.message_handler(Text(equals=['üë®‚Äçüíª –û—Ç–∑—ã–≤—ã', '–û—Ç–∑—ã–≤—ã']))
async def reviews_menu(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer('–ö–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏:\n'
                         'https://t.me/joinchat/LCp-jCYHBbBiZjgy', reply_markup=cancel)

@dp.message_handler(Text(equals=['‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã', '–ö–æ–Ω—Ç–∞–∫—Ç—ã']))
async def contacts_menu(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer('–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é:\n'
                         '@mmmtvvv', reply_markup=cancel)

@dp.message_handler(Text(equals=['‚úÖ –£—Å–ª–æ–≤–∏—è', '–£—Å–ª–æ–≤–∏—è']))
async def conditions_menu(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer('‚úÖ –û–≥—Ä–æ–º–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∏ –Ω–∞–ª–∏—á–∏–µ!\n\n'
                         '‚úÖ –ß–µ—Å—Ç–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –µ—Å—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª-–≤–æ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n'
                         '‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –æ—Ç 5 –±—É—Ç—ã–ª–æ–∫\n\n'
                         '‚úÖ –°–∞–º–æ–≤—ã–≤–æ–∑ –≤ –ú–æ—Å–∫–≤–µ\n\n'
                         '‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É 100%', reply_markup=cancel)

@dp.message_handler(Text(equals=['üç∫ –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç']))
async def contacts_menu(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:', reply_markup=choice_assortment)


@dp.callback_query_handler(text='sigs')
async def sigs_asort(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    db = sqlite3.connect('product.db')
    cur = db.cursor()

    cur.execute(f'SELECT * FROM sigs')
    products = cur.fetchall()
    text_products = ''
    start_text = '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ü–µ–Ω–∞ –∑–∞ –±—É—Ç—ã–ª–∫—É):\n\n'
    for i in products:
        i = [str(z) for z in i]
        str_product = ' ‚Äì '.join(i)
        text_products += f"{str_product} —Ä—É–±–ª–µ–π\n\n"

    await call.message.answer(text=start_text+text_products, reply_markup=cancel_assort)


@dp.callback_query_handler(text='snus')
async def snus_asort(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    db = sqlite3.connect('product.db')
    cur = db.cursor()

    cur.execute(f'SELECT * FROM snus')
    products = cur.fetchall()
    text_products = ''
    start_text = '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ü–µ–Ω–∞ –∑–∞ –±—É—Ç—ã–ª–∫—É):\n\n'
    for i in products:
        i = [str(z) for z in i]
        str_product = ' ‚Äì '.join(i)
        text_products += f"{str_product} —Ä—É–±–ª–µ–π\n\n"

    await call.message.answer(text=start_text + text_products, reply_markup=cancel_assort)

@dp.callback_query_handler(text='hqd')
async def hqd_asort(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    db = sqlite3.connect('product.db')
    cur = db.cursor()

    cur.execute(f'SELECT * FROM hqd')
    products = cur.fetchall()
    text_products = ''
    start_text = '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ü–µ–Ω–∞ –∑–∞ –±—É—Ç—ã–ª–∫—É):\n\n'
    for i in products:
        i = [str(z) for z in i]
        str_product = ' ‚Äì '.join(i)
        text_products += f"{str_product} —Ä—É–±–ª–µ–π\n\n"

    await call.message.answer(text=start_text + text_products, reply_markup=cancel_assort)

@dp.callback_query_handler(text='sticks')
async def sticks_asort(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    db = sqlite3.connect('product.db')
    cur = db.cursor()

    cur.execute(f'SELECT * FROM sticks')
    products = cur.fetchall()
    text_products = ''
    start_text = '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ü–µ–Ω–∞ –∑–∞ –±—É—Ç—ã–ª–∫—É):\n\n'
    for i in products:
        i = [str(z) for z in i]
        str_product = ' - '.join(i)
        text_products += f"{str_product} —Ä—É–±–ª–µ–π\n\n"

    await call.message.answer(text=start_text + text_products, reply_markup=cancel_assort)


@dp.callback_query_handler(text='cancel_assort')
async def cancel_assortment(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:', reply_markup=choice_assortment)

@dp.callback_query_handler(text='cancel')
async def cancel_menu(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)


@dp.message_handler(Text(equals=['üì© –ó–∞–∫–∞–∑–∞—Ç—å', '–ó–∞–∫–∞–∑–∞—Ç—å']))
async def forms_menu(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)

    db = sqlite3.connect('users.db')
    cur = db.cursor()

    cur.execute(f'SELECT * FROM ban WHERE chat_id = {message.from_user.id}')
    rows_user = cur.fetchall()
    if len(rows_user) == 0:
        await message.answer('–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É"\n\n'
                             '–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –∏ —É—Ç–æ—á–Ω–∏—Ç –≤—Å–µ –¥–µ—Ç–∞–ª–∏'
                             ,
                             reply_markup=forms_start)
    else:
        await message.answer('–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –∑–∞–∫–∞–∑—ã –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ. –î–ª—è —Ä–∞–∑–±–∞–Ω–∞ –Ω–∞–ø–∏—à–∏—Ç–µ @mmmtvvv')

@dp.callback_query_handler(text='forms')
async def start_form(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer(text='1. –ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û', reply_markup=ReplyKeyboardRemove())
    await Forms.first()

@dp.callback_query_handler(text='assort', state=Forms.assort)
async def assort_forms(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    #await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:', reply_markup=s_choice_assortment)

@dp.callback_query_handler(text='cancel', state=Forms.assort)
async def s_cancel_assortment(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

@dp.callback_query_handler(text='sigs', state=Forms.assort)
async def s_sigs_asort(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    db = sqlite3.connect('product.db')
    cur = db.cursor()

    cur.execute(f'SELECT * FROM sigs')
    products = cur.fetchall()
    text_products = ''
    start_text = '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ü–µ–Ω–∞ –∑–∞ –±—É—Ç—ã–ª–∫—É):\n\n'
    for i in products:
        i = [str(z) for z in i]
        str_product = ' ‚Äì '.join(i)
        text_products += f"{str_product} —Ä—É–±–ª–µ–π\n\n"

    await call.message.answer(text=start_text + text_products, reply_markup=cancel_assort)

@dp.callback_query_handler(text='snus', state=Forms.assort)
async def s_snus_asort(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    db = sqlite3.connect('product.db')
    cur = db.cursor()

    cur.execute(f'SELECT * FROM snus')
    products = cur.fetchall()
    text_products = ''
    start_text = '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ü–µ–Ω–∞ –∑–∞ –±—É—Ç—ã–ª–∫—É):\n\n'
    for i in products:
        i = [str(z) for z in i]
        str_product = ' ‚Äì '.join(i)
        text_products += f"{str_product} —Ä—É–±–ª–µ–π\n\n"

    await call.message.answer(text=start_text + text_products, reply_markup=cancel_assort)

@dp.callback_query_handler(text='hqd', state=Forms.assort)
async def s_hqd_asort(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    db = sqlite3.connect('product.db')
    cur = db.cursor()

    cur.execute(f'SELECT * FROM hqd')
    products = cur.fetchall()
    text_products = ''
    start_text = '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ü–µ–Ω–∞ –∑–∞ –±–ª–æ–∫):\n\n'
    for i in products:
        i = [str(z) for z in i]
        str_product = ' ‚Äì '.join(i)
        text_products += f"{str_product} —Ä—É–±–ª–µ–π\n\n"

    await call.message.answer(text=start_text + text_products, reply_markup=cancel_assort)

@dp.callback_query_handler(text='sticks', state=Forms.assort)
async def s_sticks_asort(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    db = sqlite3.connect('product.db')
    cur = db.cursor()

    cur.execute(f'SELECT * FROM sticks')
    products = cur.fetchall()
    text_products = ''
    start_text = '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ (—Ü–µ–Ω–∞ –∑–∞ –±—É—Ç—ã–ª–∫—É):\n\n'
    for i in products:
        i = [str(z) for z in i]
        str_product = ' ‚Äì '.join(i)
        text_products += f"{str_product} —Ä—É–±–ª–µ–π\n\n"

    await call.message.answer(text=start_text + text_products, reply_markup=cancel_assort)

@dp.callback_query_handler(text='cancel_assort', state=Forms.assort)
async def s_cancel_assortment_menu(call: CallbackQuery):
    await call.answer(cache_time=60)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:', reply_markup=s_choice_assortment)

@dp.message_handler(state=Forms.name)
async def fio(message: types.Message, state: FSMContext):

    name = message.text

    await state.update_data(
        {"name": name}
    )

    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)

    await message.answer('2. –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞)')

    await Forms.next()

@dp.message_handler(state=Forms.adress)
async def adress(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data.get('name')
    adress = message.text

    await state.update_data(
        {"adress": adress}
    )

    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)

    await message.answer('3. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')

    await Forms.next()

@dp.message_handler(state=Forms.number)
async def number(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data.get('name')
    adress = data.get('adress')
    number = message.text

    await state.update_data(
        {"number": number}
    )

    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)

    await message.answer(text='4. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏ –∫–æ–ª-–≤–æ –±—É—Ç—ã–ª–æ–∫', reply_markup=forms)

    await Forms.next()

@dp.message_handler(state=Forms.assort)
async def assort(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data.get('name')
    adress = data.get('adress')
    number = data.get('number')
    assort = message.text

    await state.update_data(
        {"assort": assort}
    )

    db = sqlite3.connect('users.db')
    cur = db.cursor()

    cur.execute(f'SELECT chat_id FROM first_sale WHERE chat_id = {message.from_user.id}')
    rows = cur.fetchall()
    if len(rows) == 0:
        fs = '–ù–µ—Ç –ø–µ—Ä–≤–æ–π —Å–∫–∏–¥–∫–∏'
    else:
        fs = '–ï—Å—Ç—å –ø–µ—Ä–≤–∞—è —Å–∫–∏–¥–∫–∞'

    user_id = message.from_user.username
    chat_id = message.from_user.id


    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)

    await message.answer('–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä\n',
                         reply_markup=start_menu)

    await bot.send_message(chat_id=admin_id,
                           text='–ü—Ä–∏—à—ë–ª –∑–∞–∫–∞–∑!\n\n'
                           
                           f'{name}\n'
                           f'{adress}\n'
                           f'{number}\n'
                           f'{assort}\n'
                           f'@{user_id}\n'
                           f'{chat_id}\n'
                           f'{fs}'
                           )

    await message.answer('üç∫ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PIVO 2 PIVO!\n \n'
                         '‚úÖ –£ –Ω–∞—Å –í—ã –Ω–∞–π–¥–µ—Ç–µ —É—á—à–∏–µ —Å–æ—Ä—Ç–∞ –ø–∏–≤–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º\n \n'
                         'üì© –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –±–æ—Ç–∞', reply_markup=start_menu)

    await state.finish()

